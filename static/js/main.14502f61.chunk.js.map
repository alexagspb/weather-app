{"version":3,"sources":["ducks/loading/actions.js","ducks/loading/reducers.js","ducks/cities/actions.js","ducks/cities/reducers.js","ducks/index.js","localstorage.js","api.js","sagas/city.js","sagas/cities.js","sagas/index.js","store.js","components/Input/Input.js","components/City/City.js","helpers.js","components/Day/Day.js","components/Weather/Weather.js","ducks/loading/selectors.js","ducks/cities/selectors.js","App.js","index.js"],"names":["getCityRequest","createActions","updateCityRequest","getCitySuccess","getCityError","setCityActive","loading","handleActions","_handleActions","Object","defineProperty","toString","getCitiesRequest","selectCityRequest","getCitiesSuccess","removeCityRequest","removeCitySuccess","activeCity","reducers_handleActions","_state","action","payload","citiesList","_handleActions2","state","toConsumableArray","concat","filter","item","name","error","_handleActions3","combineReducers","cities","getCitiesFromLocalStorage","localStorage","getItem","JSON","parse","setCities","setItem","stringify","getCityFromLocalStorage","id","list","setCityToLocalStorage","_ref","removeCityFromLocalStorage","baseURL","apiKey","api","fetchForecastByLocation","location","fetch","then","res","json","fetchForecastByCoords","_ref2","lat","lon","watchFetchCity","fetchCity","regenerator_default","a","wrap","_context","prev","next","takeLatest","stop","_marked","this","_getCityFromLocalStor","_id","_name","_list","_ref$city","_context2","type","put","t0","sent","city","call","t1","_marked2","watchFetchCities","fetchCities","cities_marked","citiesArr","push","cities_marked2","sagas_callee","fork","sagas_marked","sagaMiddleware","createSagaMiddleware","Input","handleInputChange","e","_this","setState","target","value","handleKeyPress","props","key","trim","length","handleClick","react_default","createElement","className","placeholder","onChange","onKeyPress","onClick","PureComponent","City","isActive","updateCity","selectCity","removeCity","daysMap","0","1","2","3","4","5","6","monthsMap","7","8","9","10","11","convertTemp","kelvin","parseInt","Day","unixTimestmap","timestamp","Date","day","getDay","date","getDate","month","getMonth","dt","weather","description","temp","min","max","humidity","Weather","getcurrentLocation","console","log","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","pos","coords","latitude","longitude","_this2","_this$props","components_Input_Input","index_umd_default","size","color","gap","map","City_City","Day_Day","mapDispatchToProps","connect","getLoading","getError","getCitiesList","getActiveCity","App","components_Weather_Weather","Component","store","initialState","createStore","rootReducer","compose","applyMiddleware","window","devToolsExtension","__REDUX_DEVTOOLS_EXTENSION__","f","run","rootSaga","ReactDOM","render","react_redux_es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.14502f61.chunk.js","sourcesContent":["import { createActions } from \"redux-actions\";\n\nexport const { getCityRequest } = createActions(\"GET_CITY_REQUEST\");\nexport const { updateCityRequest } = createActions(\"UPDATE_CITY_REQUEST\");\nexport const { getCitySuccess } = createActions(\"GET_CITY_SUCCESS\");\nexport const { getCityError } = createActions(\"GET_CITY_ERROR\");\nexport const { setCityActive } = createActions(\"SET_CITY_ACTIVE\");\n","import { handleActions } from \"redux-actions\";\nimport {\n  getCityRequest,\n  updateCityRequest,\n  getCitySuccess,\n  getCityError,\n  setCityActive\n} from \"./actions\";\n\nconst loading = handleActions(\n  {\n    [getCityRequest.toString()]: () => true,\n    [updateCityRequest.toString()]: () => true,\n    [getCitySuccess.toString()]: () => false,\n    [getCityError.toString()]: () => false,\n    [setCityActive.toString()]: () => false\n  },\n  false\n);\n\nexport default loading;\n","import { createActions } from \"redux-actions\";\n\nexport const { getCityRequest } = createActions(\"GET_CITY_REQUEST\");\nexport const { getCitiesRequest } = createActions(\"GET_CITIES_REQUEST\");\nexport const { updateCityRequest } = createActions(\"UPDATE_CITY_REQUEST\");\nexport const { selectCityRequest } = createActions(\"SELECT_CITY_REQUEST\");\nexport const { getCitySuccess } = createActions(\"GET_CITY_SUCCESS\");\nexport const { getCitiesSuccess } = createActions(\"GET_CITIES_SUCCESS\");\nexport const { getCityError } = createActions(\"GET_CITY_ERROR\");\nexport const { removeCityRequest } = createActions(\"REMOVE_CITY_REQUEST\");\nexport const { removeCitySuccess } = createActions(\"REMOVE_CITY_SUCCESS\");\nexport const { setCityActive } = createActions(\"SET_CITY_ACTIVE\");\n","import { handleActions } from \"redux-actions\";\nimport { combineReducers } from \"redux\";\nimport {\n  getCitySuccess,\n  getCitiesSuccess,\n  getCityError,\n  removeCitySuccess,\n  setCityActive\n} from \"./actions\";\n\nconst activeCity = handleActions(\n  {\n    [setCityActive.toString()]: (_state, action) => action.payload,\n    [removeCitySuccess.toString()]: _state => ({})\n  },\n  {}\n);\n\nconst citiesList = handleActions(\n  {\n    [getCitySuccess.toString()]: (state, action) => [...state, action.payload],\n    [getCitiesSuccess.toString()]: (_state, action) => action.payload,\n    [getCityError.toString()]: state => state,\n    [removeCitySuccess.toString()]: (state, action) =>\n      state.filter(item => item.name !== action.payload)\n  },\n  []\n);\n\nconst error = handleActions(\n  {\n    [getCitySuccess.toString()]: _state => null,\n    [getCityError.toString()]: (_state, action) => action.payload\n  },\n  null\n);\n\nexport default combineReducers({ citiesList, activeCity, error });\n","import { combineReducers } from \"redux\";\nimport loading from \"./loading\";\nimport cities from \"./cities\";\n\nexport default combineReducers({ loading, cities });\n","export function getCitiesFromLocalStorage() {\n  let cities = localStorage.getItem(\"cities\");\n  cities = cities ? JSON.parse(cities) : {};\n  return cities;\n}\n\nfunction setCities(cities) {\n  localStorage.setItem(\"cities\", JSON.stringify(cities));\n}\n\nexport function getCityFromLocalStorage(name) {\n  let cities = getCitiesFromLocalStorage();\n\n  if (name in cities) {\n    return { name, id: cities[name].id, list: cities[name].list };\n  } else {\n    return null;\n  }\n}\n\nexport function setCityToLocalStorage({ id, name, list }) {\n  let cities = getCitiesFromLocalStorage();\n\n  if (!(name in cities)) {\n    cities[name] = { id, list };\n  }\n\n  setCities(cities);\n}\n\nexport function removeCityFromLocalStorage(name) {\n  let cities = getCitiesFromLocalStorage();\n\n  if (name in cities) {\n    delete cities[name];\n  }\n\n  setCities(cities);\n}\n","const baseURL = `https://api.openweathermap.org/data/2.5/`;\nconst apiKey = `e539b3dcdce62f43d0c9eac4ff2b6ab4`;\n\nconst api = {\n  fetchForecastByLocation: function({ location }) {\n    return fetch(\n      `${baseURL}forecast/daily?q=${location}&type=accurate&APPID=${apiKey}&cnt=5`\n    ).then(res => res.json());\n  },\n  fetchForecastByCoords: function({ lat, lon }) {\n    return fetch(\n      `${baseURL}forecast/daily?lat=${lat}&lon=${lon}&type=accurate&APPID=${apiKey}&cnt=5`\n    ).then(res => res.json());\n  }\n};\n\nexport default api;\n","import { takeLatest, put, call } from \"redux-saga/effects\";\nimport {\n  getCityRequest,\n  getCitySuccess,\n  updateCityRequest,\n  getCityError,\n  removeCityRequest,\n  removeCitySuccess,\n  selectCityRequest,\n  setCityActive\n} from \"../ducks/cities\";\n\nimport {\n  getCityFromLocalStorage,\n  setCityToLocalStorage,\n  removeCityFromLocalStorage\n} from \"../localstorage\";\n\nimport api from \"../api\";\n\nexport function* watchFetchCity() {\n  yield takeLatest(\n    [getCityRequest, removeCityRequest, selectCityRequest, updateCityRequest],\n    fetchCity\n  );\n}\n\nfunction* fetchCity(action) {\n  //При выборе города из списка просто достаем его из LocalStorage\n  if (action.type === selectCityRequest().type) {\n    const { id, name, list } = getCityFromLocalStorage(action.payload);\n    yield put(setCityActive({ id, name, list }));\n  }\n\n  if (\n    action.type === getCityRequest().type ||\n    action.type === updateCityRequest().type\n  ) {\n    let id, name, list;\n    //При запросе нового города или запросе обновления получаем его по api по имени или координатам\n    try {\n      ({\n        city: { id, name },\n        list\n      } = action.payload.location\n        ? yield api.fetchForecastByLocation(action.payload)\n        : yield api.fetchForecastByCoords(action.payload));\n\n      yield put(removeCitySuccess(name));\n      yield call(removeCityFromLocalStorage, name);\n\n      yield put(getCitySuccess({ id, name, list }));\n      yield call(setCityToLocalStorage, { id, name, list });\n    } catch (error) {\n      //Обработка ошибок\n      yield put(getCityError(\"Укажите корректный город\"));\n    }\n    //Устанавливаем активный город\n    yield put(setCityActive({ id, name, list }));\n  }\n  //Удаляем город\n  if (action.type === removeCityRequest().type) {\n    yield put(removeCitySuccess(action.payload));\n    yield call(removeCityFromLocalStorage, action.payload);\n  }\n}\n","import { takeLatest, put } from \"redux-saga/effects\";\nimport { getCitiesRequest, getCitiesSuccess } from \"../ducks/cities\";\n\nimport { getCitiesFromLocalStorage } from \"../localstorage\";\n\nexport function* watchFetchCities() {\n  yield takeLatest([getCitiesRequest, getCitiesSuccess], fetchCities);\n}\n\nfunction* fetchCities(action) {\n  if (action.type === getCitiesRequest().type) {\n    let cities = getCitiesFromLocalStorage();\n\n    let citiesArr = [];\n\n    for (let name in cities) {\n      citiesArr.push({\n        name: name,\n        id: cities[name].id,\n        list: cities[name].list\n      });\n    }\n\n    yield put(getCitiesSuccess(citiesArr));\n  }\n}\n","import { fork } from \"redux-saga/effects\";\nimport { watchFetchCity } from \"./city\";\nimport { watchFetchCities } from \"./cities\";\n\nexport default function*() {\n  yield fork(watchFetchCities);\n  yield fork(watchFetchCity);\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./ducks\";\nimport rootSaga from \"./sagas\";\nimport createSagaMiddleware from \"redux-saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default initialState => {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n      applyMiddleware(sagaMiddleware),\n      window.devToolsExtension ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f\n    )\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n","import React, { PureComponent } from \"react\";\n\nimport \"./Input.css\";\n\nclass Input extends PureComponent {\n  state = { city: \"\" };\n\n  handleInputChange = e => {\n    this.setState({ city: e.target.value });\n  };\n\n  handleKeyPress = e => {\n    const { city } = this.state;\n    const { getCityRequest } = this.props;\n\n    if (e.key === \"Enter\" && city.trim().length) {\n      getCityRequest({ location: city });\n      this.setState({ city: \"\" });\n    }\n  };\n\n  handleClick = e => {\n    const { city } = this.state;\n    const { getCityRequest } = this.props;\n\n    if (city.trim().length) {\n      getCityRequest({ location: city });\n      this.setState({ city: \"\" });\n    }\n  };\n\n  render() {\n    const { city } = this.state;\n\n    return (\n      <div>\n        <input\n          className=\"weather__input\"\n          placeholder=\"Введите город\"\n          value={city}\n          onChange={this.handleInputChange}\n          onKeyPress={this.handleKeyPress}\n        />\n        <button onClick={this.handleClick} className=\"weather__button\">\n          Добавить город\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React from \"react\";\nimport \"./City.css\";\n\nexport default function City(props) {\n  return (\n    <div className={`${props.isActive ? \"City City_active\" : \"City\"}`}>\n      <div\n        className=\"City__update\"\n        onClick={() => props.updateCity(props.item.name)}\n      />\n      <div\n        className=\"City__name\"\n        onClick={() => props.selectCity(props.item.name)}\n      >\n        {props.item.name}\n      </div>\n      <div\n        className=\"City__remove\"\n        onClick={() => props.removeCity(props.item.name)}\n      />\n    </div>\n  );\n}\n","const daysMap = {\n  \"0\": \"Sunday\",\n  \"1\": \"Monday\",\n  \"2\": \"Tuesday\",\n  \"3\": \"Wednesday\",\n  \"4\": \"Thursday\",\n  \"5\": \"Friday\",\n  \"6\": \"Saturday\"\n};\n\nconst monthsMap = {\n  \"0\": \"Jan\",\n  \"1\": \"Feb\",\n  \"2\": \"Mar\",\n  \"3\": \"Apr\",\n  \"4\": \"May\",\n  \"5\": \"June\",\n  \"6\": \"July\",\n  \"7\": \"Aug\",\n  \"8\": \"Sept\",\n  \"9\": \"Oct\",\n  \"10\": \"Nov\",\n  \"11\": \"Dec\"\n};\n\nfunction convertTemp(kelvin) {\n  return parseInt((kelvin - 273.15) * 1.8 + 32.0, 10);\n}\n\nfunction getDate(unixTimestmap) {\n  let timestamp = new Date(unixTimestmap * 1000);\n  let day = daysMap[timestamp.getDay()];\n  let date = timestamp.getDate();\n  let month = monthsMap[timestamp.getMonth()];\n  return `${day}, ${month} ${date}`;\n}\n\nexport { convertTemp, getDate };\n","import React from \"react\";\nimport { convertTemp, getDate } from \"../../helpers\";\nimport \"./Day.css\";\n\nexport default function Day(props) {\n  return (\n    <div className=\"Day\">\n      <h3>{getDate(props.item.dt)}</h3>\n      <p>{props.item.weather[0].description}</p>\n      <p>min temp: {convertTemp(props.item.temp.min)} degrees</p>\n      <p>max temp: {convertTemp(props.item.temp.max)} degrees</p>\n      <p>humidity: {props.item.humidity}</p>\n    </div>\n  );\n}\n","import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"react-svg-spinner\";\n\nimport \"./Weather.css\";\n\nimport Input from \"../Input\";\nimport City from \"../City\";\nimport Day from \"../Day\";\n\nimport {\n  getCityRequest,\n  getCitiesRequest,\n  removeCityRequest,\n  updateCityRequest,\n  selectCityRequest,\n  getCitiesList,\n  getActiveCity,\n  getError\n} from \"../../ducks/cities\";\n\nimport { getLoading } from \"../../ducks/loading\";\n\nclass Weather extends PureComponent {\n  async componentDidMount() {\n    this.props.getCitiesRequest();\n\n    const { lat, lon } = await this.getcurrentLocation();\n    console.log(lat, lon);\n    //Если получили координаты текущего местоположения - запрашиваем погоду по координатам\n    this.props.getCityRequest({ lat, lon });\n  }\n\n  getcurrentLocation() {\n    if (navigator && navigator.geolocation) {\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          resolve({\n            lat: coords.latitude,\n            lon: coords.longitude\n          });\n        });\n      });\n    }\n  }\n\n  removeCity = name => {\n    this.props.removeCityRequest(name);\n  };\n\n  updateCity = name => {\n    this.props.updateCityRequest({ location: name });\n  };\n\n  selectCity = name => {\n    this.props.selectCityRequest(name);\n  };\n\n  render() {\n    const {\n      loading,\n      error,\n      citiesList,\n      activeCity,\n      getCityRequest\n    } = this.props;\n\n    return (\n      <div className=\"weather\">\n        <Input getCityRequest={getCityRequest} />\n        <div className=\"weather__error\">{error}</div>\n\n        {loading ? (\n          <div className=\"spinner row justify-content-md-center\">\n            <Spinner size=\"64px\" color=\"blue\" gap={5} />\n          </div>\n        ) : (\n          <div>\n            <div className=\"weather__cities\">\n              {citiesList &&\n                citiesList.map(item => (\n                  <City\n                    key={item.id}\n                    isActive={activeCity.id === item.id}\n                    item={item}\n                    selectCity={this.selectCity}\n                    updateCity={this.updateCity}\n                    removeCity={this.removeCity}\n                  />\n                ))}\n            </div>\n            <div className=\"weather__days\">\n              {activeCity.list &&\n                activeCity.list.map(item => <Day key={item.dt} item={item} />)}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loading: getLoading(state),\n  error: getError(state),\n  citiesList: getCitiesList(state),\n  activeCity: getActiveCity(state)\n});\n\nconst mapDispatchToProps = {\n  getCityRequest,\n  getCitiesRequest,\n  removeCityRequest,\n  updateCityRequest,\n  selectCityRequest\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Weather);\n","export const getLoading = state => state.loading;\n","export const getCitiesList = state => state.cities.citiesList;\nexport const getActiveCity = state => state.cities.activeCity;\nexport const getError = state => state.cities.error;\n","import React, { Component } from \"react\";\nimport Weather from \"./components/Weather\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Weather />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport createStore from \"./store\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// serviceWorker.unregister();\n"],"sourceRoot":""}